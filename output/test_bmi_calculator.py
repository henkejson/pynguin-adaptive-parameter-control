# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bmi_calculator as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.BMICalc(bool_0, bool_0, bool_0)


def test_case_1():
    int_0 = 544
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Underweight"


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1829.0
    float_1 = -365.323
    none_type_0 = None
    module_0.BMICalc(float_0, float_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.BMICalc(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.BMICalc(bool_0, bool_0, bool_0)


def test_case_5():
    int_0 = 544
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Underweight"
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_teens_and_children()


def test_case_6():
    int_0 = 2
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 584
    bool_0 = False
    module_0.BMICalc(int_0, int_0, bool_0)


def test_case_8():
    int_0 = 342
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Overweight"


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 538
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Normal weight"
    var_0.classify_bmi_adults()


def test_case_10():
    int_0 = 302
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Obese"
    var_1 = b_m_i_calc_0.classify_bmi_adults()
    assert var_1 == "Obese"
    var_2 = b_m_i_calc_0.classify_bmi_adults()
    assert var_2 == "Obese"
    var_3 = module_1.object()
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_teens_and_children()


def test_case_11():
    int_0 = 581
    bool_0 = True
    b_m_i_calc_0 = module_0.BMICalc(bool_0, bool_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Severely Obese"
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_teens_and_children()


def test_case_12():
    int_0 = 2
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_adults()
